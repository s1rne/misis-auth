import mongoose, { Document, Schema } from 'mongoose';

export interface IAuthCode extends Document {
  _id: string;
  code: string;
  userId: string;
  clientId: string;
  redirectUri: string;
  scopes: string[];
  expiresAt: Date;
  isUsed: boolean;
  createdAt: Date;
}

const AuthCodeSchema = new Schema<IAuthCode>({
  code: {
    type: String,
    required: true,
    unique: true,
  },
  userId: {
    type: String,
    required: true,
    ref: 'User',
  },
  clientId: {
    type: String,
    required: true,
    ref: 'Application',
  },
  redirectUri: {
    type: String,
    required: true,
  },
  scopes: [{
    type: String,
    required: true,
  }],
  expiresAt: {
    type: Date,
    required: true,
  },
  isUsed: {
    type: Boolean,
    default: false,
  },
}, {
  timestamps: true,
});

// –ò–Ω–¥–µ–∫—Å—ã
AuthCodeSchema.index({ userId: 1 });
AuthCodeSchema.index({ clientId: 1 });
AuthCodeSchema.index({ isUsed: 1 });

// TTL –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤
AuthCodeSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });

// –û—á–∏—â–∞–µ–º –∫—ç—à –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ middleware
if (mongoose.models.AuthCode) {
  console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å AuthCode –∏–∑ –∫—ç—à–∞');
  delete mongoose.models.AuthCode;
}

// export default mongoose.model<IAuthCode>('AuthCode', AuthCodeSchema);

export default mongoose.models.AuthCode || mongoose.model<IAuthCode>('AuthCode', AuthCodeSchema);
