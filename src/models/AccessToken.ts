import mongoose, { Document, Schema } from 'mongoose';

export interface IAccessToken extends Document {
  _id: string;
  accessToken: string;
  refreshToken?: string;
  tokenType: string;
  expiresAt: Date;
  scopes: string[];
  userId: string;
  clientId: string;
  isRevoked: boolean;
  createdAt: Date;
  updatedAt: Date;
}

const AccessTokenSchema = new Schema<IAccessToken>({
  accessToken: {
    type: String,
    required: true,
    unique: true,
  },
  refreshToken: {
    type: String,
    unique: true,
    sparse: true, // –ü–æ–∑–≤–æ–ª—è–µ—Ç null –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–µ-null
  },
  tokenType: {
    type: String,
    default: 'Bearer',
  },
  expiresAt: {
    type: Date,
    required: true,
  },
  scopes: [{
    type: String,
    required: true,
  }],
  userId: {
    type: String,
    required: true,
    ref: 'User',
  },
  clientId: {
    type: String,
    required: true,
    ref: 'Application',
  },
  isRevoked: {
    type: Boolean,
    default: false,
  },
}, {
  timestamps: true,
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
// AccessTokenSchema.index({ accessToken: 1 }); // unique: true —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å
// AccessTokenSchema.index({ refreshToken: 1 }); // unique: true —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å
AccessTokenSchema.index({ userId: 1 });
AccessTokenSchema.index({ clientId: 1 });
// AccessTokenSchema.index({ isRevoked: 1 });

// TTL –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
AccessTokenSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });

// –¢–æ–∫–µ–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ OAuthServer, middleware —É–¥–∞–ª–µ–Ω

// –û—á–∏—â–∞–µ–º –∫—ç—à –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ middleware
if (mongoose.models.AccessToken) {
  console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å AccessToken –∏–∑ –∫—ç—à–∞');
  delete mongoose.models.AccessToken;
}

export default mongoose.model<IAccessToken>('AccessToken', AccessTokenSchema);